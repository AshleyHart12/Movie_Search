{"ast":null,"code":"var _jsxFileName = \"/Users/ashinator/codePractice/movie_database/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from './Components/Navbar';\nimport Movie from './Components/movieCard';\nimport Footer from './Components/footer';\nimport Search from './Components/search';\nimport Axios from \"axios\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const url = \"http://www.omdbapi.com/?apikey=dc43bd63\";\n    fetch(url).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n  }, [setMovies]); // The fetch() API is an inbuilt JavaScript method for getting resources from a server or an API endpoint. It’s similar to XMLHttpRequest, but the fetch API provides a more powerful and flexible feature set.\n  // const search = input => {\n  //   fetch(`http://www.omdbapi.com/?t=Game of Thrones&Season=1`)\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     console.log(data);\n  //    })\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    search: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, movies.map(movies => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 30\n    }\n  }, movies.title))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ashinator/codePractice/movie_database/src/App.js"],"names":["React","useState","useEffect","Navbar","Movie","Footer","Search","Axios","App","movies","setMovies","url","fetch","then","res","json","data","console","log","search","map","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,GAAG,GAAG,yCAAZ;AACDC,IAAAA,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAzB,EACCF,IADD,CACOG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAHD;AAIA,GANQ,EAMN,CAACN,SAAD,CANM,CAAT,CAHa,CAWf;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAIF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAES,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIV,MAAM,CAACW,GAAP,CAAWX,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,MAAM,CAACY,KAAZ,CAArB,CAFJ,CAHF,CADF;AAmBC;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from './Components/Navbar'\nimport Movie from './Components/movieCard'\nimport Footer from './Components/footer'\nimport Search from './Components/search'\nimport Axios from \"axios\";\n\n\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const url = \"http://www.omdbapi.com/?apikey=dc43bd63\";\n   fetch(url).then((res) => res.json())\n   .then((data) => {\n     console.log(data)\n   });\n  }, [setMovies]);\n\n// The fetch() API is an inbuilt JavaScript method for getting resources from a server or an API endpoint. It’s similar to XMLHttpRequest, but the fetch API provides a more powerful and flexible feature set.\n// const search = input => {\n//   fetch(`http://www.omdbapi.com/?t=Game of Thrones&Season=1`)\n//   .then(response => response.json())\n//   .then(data => {\n//     console.log(data);\n//    })\n  // }\n\n\n\nreturn (\n  <div className=\"App\">\n    <Navbar />\n    <Search search={search} />\n    <ul>\n      {\n        movies.map(movies => <li>{movies.title}</li>)\n      }\n    </ul>\n    {/* <div>\n      {\n     ( movies.map((movie, index) => (\n        <Movie key={`${index}-${movie.Title}`} movie={movie} />\n        ))\n      )}\n    </div> */}\n  </div>\n)\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}